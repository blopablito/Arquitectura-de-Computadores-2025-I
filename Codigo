#include <iostream>
using namespace std;

// Función para mostrar un entero como binario (n bits)
void printBinary(int value, int bits) {
    for (int i = bits - 1; i >= 0; --i) {
        cout << ((value >> i) & 1);
    }
}

// Algoritmo de Booth
void boothAlgorithm(int M, int Q, int n) {
    int A = 0;
    int Q_1 = 0;
    int count = n;

    // Enmascarar valores para que se mantengan en n bits
    int mask = (1 << n) - 1;
    
    // Asegurar M está en complemento a dos si es negativo
    if (M < 0) M = (1 << n) + M;
    if (Q < 0) Q = (1 << n) + Q;

    int negM = (~M + 1) & mask;

    cout << "Inicialización:\n";
    cout << "A: "; printBinary(A, n);
    cout << "  Q: "; printBinary(Q, n);
    cout << "  Q-1: " << Q_1 << "\n\n";

    while (count-- > 0) {
        int Q0 = Q & 1;
        int bits = (Q0 << 1) | Q_1;

        if (bits == 0b10) {
            A = (A + negM) & mask;
            cout << "A <- A - M\n";
        } else if (bits == 0b01) {
            A = (A + M) & mask;
            cout << "A <- A + M\n";
        } else {
            cout << "No operación\n";
        }

        // Shift aritmético: combinar A y Q, luego desplazar
        int combined = (A << (n + 1)) | (Q << 1) | Q_1;
        combined = combined >> 1; // desplazamiento aritmético por ser int (signo se conserva)

        // Extraer nuevos valores
        Q_1 = combined & 1;
        Q = (combined >> 1) & mask;
        A = (combined >> (n + 1)) & mask;

        cout << "A: "; printBinary(A, n);
        cout << "  Q: "; printBinary(Q, n);
        cout << "  Q-1: " << Q_1 << "  Count: " << count << "\n\n";
    }

    int result = (A << n) | Q;

    // Signo: ajustar resultado si es negativo (bit más significativo en 1)
    if ((result >> (2 * n - 1)) & 1) {
        result |= ~((1 << (2 * n)) - 1); // signo extendido
    }

    cout << "Resultado final en binario: ";
    printBinary(result, 2 * n);
    cout << "\nResultado final en decimal: " << result << "\n";
}
int main() {
    int M, Q, n;
    cout << "Multiplicando (M): ";
    cin >> M;
    cout << "Multiplicador (Q): ";
    cin >> Q;
    cout << "Número de bits (n): ";
    cin >> n;

    boothAlgorithm(M, Q, n);
    return 0;
}
